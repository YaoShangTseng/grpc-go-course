syntax = "proto3";

package sum;
option go_package = "sumpb";

message SumRequest {
  int32 first_num = 1;
  int32 second_num = 2;
}

message SumResponse { int32 sum = 1; }

message PrimeNumberDecompositionRequest { int64 number = 1; }

message PrimeNumberDecompositionResponse { int64 prime_factor = 1; }

message ComputeAverageRequest { int32 number = 1; }

message ComputeAverageResponse { double average = 1; }

message FindMaximumRequest { int32 number = 1; }

message FindMaximumResponse { int32 maximum = 1; }

message SquareRootRequest { int32 number = 1; }

message SquareRootResponse { double number_root = 1; }

service SumService {
  // Unary
  rpc Sum(SumRequest) returns (SumResponse) {};
  // Server Streaming
  rpc PrimeNumberDecomposition(PrimeNumberDecompositionRequest)
      returns (stream PrimeNumberDecompositionResponse) {};
  // Client Streaming
  rpc ComputeAverage(stream ComputeAverageRequest)
      returns (ComputeAverageResponse) {};
  // BiDirection Streamging
  rpc FindMaximum(stream FindMaximumRequest)
      returns (stream FindMaximumResponse) {};

  // error handling
  // this RPC will throw an exception if the sent number is negative
  // The error being sent is of type INVALID_ARGUMENT
  rpc SquareRoot(SquareRootRequest) returns (SquareRootResponse) {};
};
